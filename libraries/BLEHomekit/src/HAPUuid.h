/**************************************************************************/
/*!
    @file     HAPUuid.h
    @author   hathach (tinyusb.org)

    @section LICENSE

    Software License Agreement (BSD License)

    Copyright (c) 2018, Adafruit Industries (adafruit.com)
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
    1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
    3. Neither the name of the copyright holders nor the
    names of its contributors may be used to endorse or promote products
    derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/**************************************************************************/
#ifndef HAPUUID_H_
#define HAPUUID_H_

#define HAP_UUID_CHR_SERVICE_ID                   ((const uint8_t[]) { 0xD1, 0xA0, 0x83, 0x50, 0x00, 0xAA, 0xD3, 0x87, 0x17, 0x48, 0x59, 0xA7, 0x5D, 0xE9, 0x04, 0xE6 })
#define HAP_UUID_DSC_CHARACTERISTIC_ID            ((const uint8_t[]) { 0x9A, 0x93, 0x96, 0xD7, 0xBD, 0x6A, 0xD9, 0xB5, 0x16, 0x46, 0xD2, 0x81, 0xFE, 0xF0, 0x46, 0xDC })
#define HAP_UUID_CHR_SERVICE_SIGNATURE            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xA5, 0x00, 0x00, 0x00 })

/*------------------------------------------------------------------*/
/* PAIRING
 *------------------------------------------------------------------*/
#define HAP_UUID_SVC_PAIRING                      ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_PAIR_SETUP                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_PAIR_VERIFY                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_PAIR_FEATURE                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x4F, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_PAIR_PAIRING                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00 })

/*------------------------------------------------------------------*/
/* Apple-defined Services
 *------------------------------------------------------------------*/
#define HAP_UUID_SVC_PROTOCOL_INFO            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_ACCESSORY_INFO           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_FAN                      ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_GARAGE_DOOR_OPENER       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_LIGHT_BULB               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_LOCK_MANAGEMENT          ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_LOCK_MECHANISM           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_OUTLET                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_SWITCH                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_THERMOSTAT               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_AIR_QUALITY_SENSOR       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x8D, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_SECURITY_SYSTEM          ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_CO_SENSOR                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_CONTACT_SENSOR           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_DOOR                     ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_HUMID_SENSOR             ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_LEAK_SENSOR              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_LIGHT_SENSOR             ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_MOTION_SENSOR            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_OCCUPANCY_SENSOR         ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_SMOKE_SENSOR             ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_STATELESS_PROGRAM_SWITCH ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_TEMP_SENSOR              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_WINDOW                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_WINDOW_COVERING          ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_BATTERY                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_CO2_SENSOR               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_CAMERA_RTP_STREAM_MGT    ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00 })
#define HAP_UUID_SVC_MICROPHONE               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00 })
#define HAP_UUID_SVC_SPEAKER                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00 })
#define HAP_UUID_SVC_DOORBELL                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00 })
#define HAP_UUID_SVC_FAN_V2                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_SLAT                     ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xB9, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_FILTER_MAINTENANCE       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xBA, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_AIR_PURIFIER             ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xBB, 0x00, 0x00, 0x00 })
#define HAP_UUID_SVC_SERVICE_LABEL            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00 })

/*------------------------------------------------------------------*/
/* Apple-defined Characteristics
 *------------------------------------------------------------------*/
#define HAP_UUID_CHR_ADMIN_ONLY_ACCESS            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_AUDIO_FEEDBACK               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_BRIGHTNESS                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_COOLING_THRESHOLD_TEMP       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_DOOR_STATE               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_HEAT_COOL_STATE          ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_RELATIVE_HUMID           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_TEMP                     ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_FIRMWARE_REV                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_HARDWARE_REV                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_HEATING_THRESHOLD_TEMP       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_HUE                          ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_IDENTIFY                     ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_LOCK_CONTROL_POINT           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_LOCK_CUR_STATE               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_LOCK_LAST_KNOWN_ACTION       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_LOCK_MGT_AUTO_SEC_TIMEOUT    ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_LOCK_TARGET_STATE            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_LOGS                         ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_MANUFACTURER                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_MODEL                        ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_MOTION_DETECTED              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_NAME                         ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_OBSTRUCTION_DETECTED         ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_ON                           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_OUTLET_IN_USE                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_ROTATION_DIRECTION           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_ROTATION_SPEED               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SATURATION                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SERIAL_NUMBER                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_DOOR_STATE            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_HEAT_COOL_STATE       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_RELATIVE_HUMID        ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_TEMP                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TEMP_DISPLAY_UNIT            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_VERSION                      ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_AIR_PARTICULATE_DENSITY      ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_AIR_PARTICULATE_SIZE         ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SECURITY_SYSTEM_CUR_STATE    ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SECURITY_SYSTEM_TARGET_STATE ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_BATTERY_LEVEL                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CO_DETECTED                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CONTACT_SENSOR_STATE         ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_AMBIENT_LIGHT_LEVEL      ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_HORIZONTAL_TILT_ANGLE    ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_POSITION                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_VERTICAL_TILT_ANGLE      ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_HOLD_POSITION                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_LEAK_DETECTED                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_OCCUPANCY_DETECTEC           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_POSITION_STATE               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_PROGRAM_SWITCH_EVENT         ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_STATUS_ACTIVE                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SMOKE_DETECTED               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_STATUS_FAULT                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_STATUS_JAMMED                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_STATUS_LOW_BATTERY           ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_STATUS_TAMPERED              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_HORIZONTAL_TILT_ANGLE ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_POSITION              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_VERTICAL_TILT_ANGLE   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SECURITY_SYSTEM_ALARM_TYPE   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x8E, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CHARGING_STATE               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x8F, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CO_LEVEL                     ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CO_PEAK_LEVEL                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CO2_DETECTED                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CO2_LEVEL                    ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CO2_PEAK_LEVEL               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_AIR_QUALITY                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_STREAMING_STATUS             ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_SUPP_VIDEO_STREAM_CONFIG     ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_SUPP_AUDIO_STREAM_CONFIG     ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_SUPP_RPT_CONFIG              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_SETUP_ENDPOINTS              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_SELECTED_RTP_STREAM_CONFIG   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_VOLUME                       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x19, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_MUTE                         ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1A, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_NIGHT_VISION                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1B, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_OPTICAL_ZOOM                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1C, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_DIGITAL_ZOOM                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1D, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_IMAGE_ROTATION               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_IMAGE_MIRRORING              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x1F, 0x01, 0x00, 0x00 })
#define HAP_UUID_CHR_ACCESSORY_FLAGS              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xA6, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_LOCK_PHYSICAL_CONTROLS       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xA7, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_AIR_PURIFIER_STATE       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xA9, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_SLAT_STATE               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SLAT_TYPE                    ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_FILTER_LIFE_LEVEL            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_FILTER_CHANGE_INDICATOR      ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_RESET_FILTER_INDICATOR       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xAD, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_AIR_PURIFIER_STATE    ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_FAN_STATE             ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_FAN_STATE                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xAF, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_ACTIVE                       ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SWING_MODE                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xB6, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_CUR_TILT_ANGLE               ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_TARGET_TILT_ANGLE            ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_OZONE_DENSITY                ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC3, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_NO2_DENSITY                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC4, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SO2_DENSITY                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC5, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_PM2DOT5_DENSITY              ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_PM10_DENSITY                 ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC7, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_VOC_DENSITY                  ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SERVICE_LABLE_INDEX          ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xCB, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_SERVICE_LABLE_NAMESPACE      ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xCD, 0x00, 0x00, 0x00 })
#define HAP_UUID_CHR_COLOR_TEMP                   ((const uint8_t[]) { 0x91, 0x52, 0x76, 0xBB, 0x26, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00 })

#endif /* HAPUUID_H_ */
